---
# Inventory of existing AWS ec2 instances

- hosts: localhost
  connection: local
  gather_facts: False
  vars_files:
    - vars/aws_credentials.vault.yml
  tasks:

    - name: Gather EC2 facts.
      ec2_instance_facts:
        aws_access_key: "{{ec2_access_key}}"
        aws_secret_key: "{{ec2_secret_key}}"
        region: us-east-2
      register: ec2_facts

    - name: Get only running instance IP addresses.
      debug:
        msg: "Instance: {{ item.0 }} launched at {{ item.4 }} has private IP address: {{ item.1 }} , public IP address: {{ item.2 }} and public DNS name: {{ item.3 }}"
      with_together:
        - "{{ ec2_facts.instances|selectattr('state.name', 'equalto', 'running')|map(attribute='tags.Class')|list }}"
        - "{{ ec2_facts.instances|selectattr('state.name', 'equalto', 'running')|map(attribute='private_ip_address')|list }}"
        - "{{ ec2_facts.instances|selectattr('state.name', 'equalto', 'running')|map(attribute='public_ip_address')|list }}"
        - "{{ ec2_facts.instances|selectattr('state.name', 'equalto', 'running')|map(attribute='public_dns_name')|list }}"
        - "{{ ec2_facts.instances|selectattr('state.name', 'equalto', 'running')|map(attribute='launch_time')|list }}"

    - name: Add running instance to Ansible Groups in memory
      add_host:
        groups: "{{ item.0 }}"
        hostname: "{{ item.3 }}"
      with_together:
        - "{{ ec2_facts.instances|selectattr('state.name', 'equalto', 'running')|map(attribute='tags.Class')|list }}"
        - "{{ ec2_facts.instances|selectattr('state.name', 'equalto', 'running')|map(attribute='private_ip_address')|list }}"
        - "{{ ec2_facts.instances|selectattr('state.name', 'equalto', 'running')|map(attribute='public_ip_address')|list }}"
        - "{{ ec2_facts.instances|selectattr('state.name', 'equalto', 'running')|map(attribute='public_dns_name')|list }}"
        - "{{ ec2_facts.instances|selectattr('state.name', 'equalto', 'running')|map(attribute='launch_time')|list }}"

- hosts: Webserver
  remote_user: ec2-user
  become: yes
  gather_facts: no
  tasks:
    - name: Install httpd
      package:
        name: "httpd"
        state: "latest"
    - name: Start service httpd, if not started
      service:
        name: httpd
        state: started